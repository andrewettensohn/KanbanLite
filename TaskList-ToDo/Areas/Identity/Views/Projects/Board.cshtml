@using Microsoft.AspNetCore.Identity
@using System.Security.Claims;
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Boards";
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <style>

        body {
            font-family: Helvetica;
        }

    </style>
</head>
<body class="text-light" id="taskBoard">
    <div class="container">

        <!-- Options -->
        <div class="pt-3">
            <center>
                <div class="d-flex justify-content-center">
                    <div class="dropdown">
                        <button class="btn border-secondary" type="button" id="btnFilter" data-toggle="dropdown">
                            <svg class="float-left" id="i-filter" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="32" fill="none" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                <path d="M2 5 C2 5 6 3 16 3 26 3 30 5 30 5 L19 18 19 27 13 30 13 18 2 5Z" />
                            </svg>
                        </button>
                        <div class="dropdown-menu">
                            <a class="dropdown-item" href="#" id="filterNotStarted" onclick="getItems('Not Started', 'filterNotStarted')">Not Started</a>
                            <a class="dropdown-item" href="#" id="filterInProgress" onclick="getItems('In-Progress', 'filterInProgress')">In-Progress</a>
                            <a class="dropdown-item" href="#" id="filterCompleted" onclick="getItems('Completed', 'filterCompleted')">Completed</a>
                        </div>
                    </div>
                    <button id="btnCreateNewTask" class="btn border-secondary text-white" data-toggle="collapse"
                            href="#multiCollapseCreateNewTask" role="button"
                            aria-expanded="false">
                        + Create New Task
                    </button>
                    <div class="dropdown">
                        <button class="btn border-secondary" type="button" id="btnSelectProject" data-toggle="dropdown">
                            <svg id="i-folder" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="32" fill="none" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                <path d="M2 26 L30 26 30 7 14 7 10 4 2 4 Z M30 12 L2 12" />
                            </svg>
                        </button>
                        <form>
                            <div id="dropdownChooseProject" class="dropdown-menu">
                                @*<hr />
                                <button class="btn border-dark ml-2" data-toggle="collapse" href="#collapseSearchProjects" role="button">Search Projects</button>*@
                            </div>
                        </form>
                    </div>
                </div>
            </center>
        </div>

        @*Hidden Active Project*@
        <p id="hiddenActiveProjectID" class="d-none"></p>

        <div>
            <br />
            <center>

                <!-- Inside Collapse | Create New Task -->
                <div class="row">
                    <div class="col">
                        <div class="collapse multi-collapse" id="multiCollapseCreateNewTask">
                            <div class="card card-body bg-dark border-secondary">
                                <form action="javascript:void(0);" method="POST" onsubmit="addItem()" class="input-group mb-3 col-md-8">
                                    <input autocomplete="off" maxlength="25" type="text" class="form-control" placeholder="New Task Name" id="add-name">
                                    <div class="input-group-append">
                                        <button type="submit" value="Add" class="btn btn-outline-secondary text-white">Add Task</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Inside Collapse | Create New Project -->
                <div class="row">
                    <div class="col">
                        <div class="collapse multi-collapse" id="collapseSearchProjects">
                            <div class="card card-body bg-dark border-secondary">
                                <form action="javascript:void(0);" method="POST" onsubmit="addItem()" class="input-group mb-3 col-md-8">
                                    <input autocomplete="off" maxlength="25" type="text" class="form-control" placeholder="Search for a Project" id="inputSearchProjects">
                                    <div class="input-group-append">
                                        <button type="submit" value="Add" class="btn btn-outline-secondary text-white">Add Task</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <br />

                <!--Active Project Header-->
                <div id="activeProjectHeaderArea">
                    <h2 class="display-6" id="activeProjectHeader"></h2>
                    <hr />
                </div>

                <!--Loading Animation-->
                <div id="loadingAnimationArea" class="d-none">
                    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>

                <div id="noProjectsFoundArea" class="d-none">
                    <h3>No projects found.</h3>
                    <p>Go to the project page to start.</p>
                    <hr />
                </div>

                <div id="noTasksFoundArea" class="d-none">
                    <h4>No tasks found.</h4>
                    <p>Make a new task, check your filters, or select a different project.</p>

                </div>

                <!--Deletion Modal-->
                <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content bg-dark">
                            <div class="modal-header">
                                <h5 class="modal-title" id="deleteConfirmationModalTitle">Task Deletion</h5>
                            </div>
                            <div class="modal-body bg-dark">
                                This action will delete the task. Are you sure?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn border-secondary text-white" data-dismiss="modal">Cancel</button>
                                <button id="btnDeleteTask" type="button" class="btn btn-danger" data-dismiss="modal">Delete Task</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!--Tag Modal-->
                <div class="modal fade" id="tagModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content bg-dark">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLongTitle">Tags</h5>
                            </div>
                            <div class="modal-body bg-dark">
                                <a href="#" class="list-group-item list-group-item-action list-group-item-primary">Primary</a>
                                <a href="#" class="list-group-item list-group-item-action list-group-item-secondary">Secondary</a>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn border-secondary text-white" data-dismiss="modal">Cancel</button>
                                <a class="btn btn-info" href="@Url.Action("Tags","Projects")">Edit Tags</a>
                            </div>
                        </div>
                    </div>
                </div>

                <!--Tasks Output-->
                <div id="output"></div>

            </center>
        </div>

    </div>
</body>
<script type="text/javascript">

    const uri = 'api/TodoItems';
    const uri1 = 'api/TodoItems/Tasks';
    const uri2 = 'api/TodoSubItems';
    const uriProject = 'api/ProjectItems';
    @*const userName = '@User.Identity.Name';*@
    const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)";

    $(document).ready(getProjectInfo());

    //GET AND DISPLAY Project Options
    function getProjectInfo() {

        $(`#dropdownChooseProject`).empty();

        fetch(uriProject + `/ProjectList/${userId}`)
            .then(response => response.json())
            .then(data => displayProjectDropdownOptions(data))
            .catch(error => console.error('Unable to get items.', error));

        function displayProjectDropdownOptions(data) {

            if (data.length == 0) {

                $("#noProjectsFoundArea").removeClass("d-none");
                $("#btnFilter").prop("disabled", true);
                $("#btnCreateNewTask").prop("disabled", true);
                $("#btnSelectProject").prop("disabled", true);
                return;
            }

            data.forEach(projectItem => {

                if (projectItem.projectIsActive) {

                    $(`#hiddenActiveProjectID`).text(projectItem.projectItemID);
                    $(`#activeProjectHeader`).text(projectItem.projectName);

                }

                var projectOptionHTML = `<a class="dropdown-item" href="#" id="projectOption${projectItem.projectItemID}" onclick="setActiveProject(${projectItem.projectItemID})">${projectItem.projectName}</a>
                                         <p class="d-none" id=hiddenProjectDescription${projectItem.projectItemID}></p>
                                        `

                var newDiv = document.createElement('div');
                newDiv.innerHTML = projectOptionHTML;
                document.getElementById("dropdownChooseProject").appendChild(newDiv);

            });

            getItems();

        }
    }

    //PUT ACTIVE PROJECT STATUS
    function setActiveProject(projectItemId) {

        const item = {

            projectItemID: parseInt(projectItemId, 10),
            userId: userId,

        };

        fetch(uriProject + `/SetActiveProject/${userId}/${projectItemId}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        })
            .then(() => getProjectInfo())
            .catch(error => console.error('Unable to delete item.', error));

    }


    //GET ALL
    function getItems(filterOption, filterElement) {

        var projectID = $(`#hiddenActiveProjectID`).text();

        $("#output").empty();

        if (typeof filterOption !== "undefined" && filterOption != null) {

            if ($(`#${filterElement}`).hasClass('active')) {

                $("#i-filter").css({ fill: "" })

                $(`#${filterElement}`).removeClass('active');

                var arrayFilterElements = ["filterNotStarted", "filterInProgress", "filterCompleted"];

                arrayFilterElements.forEach(element => {

                    if (element != filterElement) {

                        $(`#${element}`).removeClass('disabled')

                    }

                });

                getItems()
                return;

            } else {

                $("#i-filter").css({ fill: "#ffffff" })

                $(`#${filterElement}`).addClass('active');

                var arrayFilterElements = ["filterNotStarted", "filterInProgress", "filterCompleted"];

                arrayFilterElements.forEach(element => {

                    if (element != filterElement) {

                        $(`#${element}`).addClass('disabled')

                    }
                });

            }

            $('#loadingAnimationArea').toggleClass('d-none');

            fetch(uri + `/Filter/${userId}/${projectID}/${filterOption}`)
                .then(response => response.json())
                .then(data => displayItems(data))
                .catch(error => console.error('Unable to get items.', error));

        } else {

            $('#loadingAnimationArea').toggleClass('d-none');

            fetch(uri1 + `/${userId}/${projectID}`)
                .then(response => response.json())
                .then(data => displayItems(data))
                .catch(error => console.error('Unable to get items.', error));

        }

    }

    //POST TASK
    function addItem() {

        const addNameTextbox = document.getElementById('add-name');
        var projectID = $(`#hiddenActiveProjectID`).text();   

        const item = {
            taskStatus: "Not Started",
            taskName: addNameTextbox.value.trim(),
            userId: userId,
            projectID: parseInt(projectID, 10)
        };

        fetch(uri, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        })
            .then(response => response.json())
            .then(() => getProjectInfo())
            .then(() => $("#add-name").focus())
            .then(() => {
                addNameTextbox.value = '';
            })
            .catch(error => console.error('Unable to add item.', error));
    }

    //POST SUB-TASK
    function addSubItem(itemId) {

        const item = {

            todoItemID: parseInt(itemId, 10),
            userId: userId,
            subTaskStatus: "Not Started",
            subTaskName: "",
            subTaskDescription: "",
        };

        fetch(uri2, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        })
            .then(response => response.json())
            .then(data => displaySubItems(data))
            .catch(error => console.error('Unable to add item.', error));
    }

    //PUT STATUS CHANGE
    function taskStatusChange(newStatus, itemId, subItemId, itemTaskName, isSubTask) {

        if (isSubTask) {

            var uriType = uri + `/${itemId}`;
            var idToSend = subItemId;
            var subTaskDescription = $(`#subAreaTaskDescription${subItemId}`).val();

            if (typeof subTaskDescription !== "undefined") {

                subTaskDescription = subTaskDescription.toString();

            } else {

                subTaskDescription = "";

            }

            var parentTaskName = $(`#taskNameHeader${itemId}`).text();
            var parentTaskStatus = $(`#hiddenTaskStatus${itemId}`).text();
            var projectID = $(`#hiddenActiveProjectID`).text();   

            var item = {
                todoItemID: parseInt(itemId, 10),
                projectID: parseInt(projectID, 10),
                userId: userId,
                taskName: parentTaskName,
                taskStatus: parentTaskStatus,
                todoSubItems: [
                    {
                        todoSubItemID: parseInt(subItemId, 10),
                        todoItemID: parseInt(itemId, 10),
                        userId: userId,
                        subTaskName: itemTaskName,
                        subTaskStatus: newStatus,
                        subTaskDescription: subTaskDescription
                    }
                ]
            };

        } else if (isSubTask == false) {

            var uriType = uri;
            var idToSend = itemId;
            var projectID = $(`#hiddenActiveProjectID`).text();   

            var item = {
                todoItemID: parseInt(itemId, 10),
                userId: userId,
                taskName: itemTaskName,
                taskStatus: newStatus,
                projectID: parseInt(projectID, 10)
            };

        }

        fetch(`${uriType}/${idToSend}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        })
            .then(() => displayStatusChange())
            .catch(error => console.error('Unable to delete item.', error));

        function displayStatusChange() {

            if (isSubTask) {

                if (newStatus == "In-Progress") {

                    $(`#statusDropDown${itemId}`).html(newStatus)
                    $(`#statusIcon${itemId}`).attr("src", `../../lib/statusIcons/${newStatus}.png`)
                    $(`#hiddenTaskStatus${itemId}`).text(`${newStatus}`)

                }

                $(`#subStatusDropDown${subItemId}`).html(newStatus)
                $(`#subStatusIcon${subItemId}`).attr("src", `../../lib/statusIcons/${newStatus}.png`)
                $(`#subHiddenTaskStatus${subItemId}`).text(`${newStatus}`)
            }

            if (isSubTask == false) {

                $(`#statusDropDown${itemId}`).html(newStatus)
                $(`#statusIcon${itemId}`).attr("src", `../../lib/statusIcons/${newStatus}.png`)
                $(`#hiddenTaskStatus${itemId}`).text(`${newStatus}`)

            }
        }
    }

    //PUT NAME CHANGE
    function taskNameChange(itemId, subItemId, isSubTask) {

        if (isSubTask == true) {

            var newTaskName = $(`#subInputNameChange${subItemId}`).val();
            newTaskName = newTaskName.toString();
            if (newTaskName == "") { newTaskName = "Untitled" }

            var subTaskDescription = $(`#subAreaTaskDescription${subItemId}`).val();

            if (typeof subTaskDescription !== "undefined") {

                subTaskDescription = subTaskDescription.toString();

            } else {

                subTaskDescription = "";

            }

            var taskStatus = $(`#subHiddenTaskStatus${subItemId}`).text();

            var taskNameElement = `subTaskNameHeader${subItemId}`;
            var inputAreaElement = `subAreaInputNameChange${subItemId}`;

            var uriType = uri2;
            var idToSend = subItemId;


            var item = {
                todoSubItemID: parseInt(subItemId, 10),
                todoItemID: parseInt(itemId, 10),
                userId: userId,
                subTaskStatus: taskStatus,
                subTaskName: newTaskName,
                subTaskDescription: subTaskDescription
            };


        } else if (isSubTask == false) {

            var newTaskName = $(`#inputNameChange${itemId}`).val();
            newTaskName = newTaskName.toString(); 

            var taskNameElement = `taskNameHeader${itemId}`;
            var inputAreaElement = `areaInputNameChange${itemId}`;

            var uriType = uri;
            var idToSend = itemId;

            var item = {
                todoItemID: parseInt(itemId, 10),
                userId: userId,
                taskName: newTaskName,
            };

        }

        fetch(`api/TodoItems/${idToSend}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        })
            .then(() => $(`#${taskNameElement}`).text(newTaskName))
            .then(() => $(`#${inputAreaElement}`).toggleClass('d-none'))
            .then(() => $(`#${taskNameElement}`).toggleClass('d-none'))
            .catch(error => console.error('Unable to delete item.', error));
    }

    //DISPLAY TASK INPUT
    function displayTaskInput(itemId, subItemId, isSubTask) {

        if (isSubTask == true) {

            $(`#subTaskNameHeader${subItemId}`).addClass('d-none');
            var oldTaskName = $(`#subTaskNameHeader${subItemId}`).text();
            $(`#subInputNameChange${subItemId}`).val(oldTaskName);
            $(`#subAreaInputNameChange${subItemId}`).toggleClass('d-none');
            $(`#subInputNameChange${subItemId}`).focus();

        } else if (isSubTask == false) {

            $(`#taskNameHeader${itemId}`).addClass('d-none');
            var oldTaskName = $(`#taskNameHeader${itemId}`).text();
            $(`#inputNameChange${itemId}`).val(oldTaskName);
            $(`#areaInputNameChange${itemId}`).toggleClass('d-none');
            $(`#inputNameChange${itemId}`).focus();

        }
    }

    //DELETE TASK
    function deleteTask(itemId, subItemId, isSubTask) {

        $("#btnDeleteTask").on("click", function () {

            if (isSubTask == true) {

                fetch(`${uri2}/${subItemId}`, {
                    method: 'DELETE'
                })
                    .then(() => $(`#subAccordion${subItemId}`).remove())
                    .catch(error => console.error('Unable to delete item.', error));



            }
            else if (isSubTask == false) {

                fetch(`${uri}/${itemId}`, {
                    method: 'DELETE'
                })
                    .then(() => $(`#taskAccordion${itemId}`).remove())
                    .catch(error => console.error('Unable to delete item.', error));
            }
        });
    }

    //DISPLAY SUB TASK DESCRIPTION
    function addSubTaskDescription(itemId, subItemId) {

        changeSubTaskDescription(itemId, subItemId, true);
        toggleCollapse(subItemId, true);

    }

    //PUT SUB TASK DESCRIPTION
    function changeSubTaskDescription(itemId, subItemId, isNewDescription) {

        var subTaskName = $(`#subTaskNameHeader${subItemId}`).text();
        var subTaskStatus = $(`#subHiddenTaskStatus${subItemId}`).text();

        if (isNewDescription == true) {

            var subTaskDescription = "";

        } else if (isNewDescription == false) {

            var subTaskDescription = $(`#subAreaTaskDescription${subItemId}`).val();
            subTaskDescription.toString()

        }

        const item = {

            todoSubItemID: parseInt(subItemId, 10),
            todoItemID: parseInt(itemId, 10),
            userId: userId,
            subTaskStatus: subTaskStatus,
            subTaskName: subTaskName,
            subTaskDescription: subTaskDescription
        };

        fetch(`${uri2}/${subItemId}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        })
            .then(response => response.json())
            .then(data => createSubTaskDescriptionHTML(data))
            .then(() => toggleCollapse(subItemId, true))
            .catch(error => console.error('Unable to delete item.', error));

    }

    //DISPLAY COLLAPSABLE
    function toggleCollapse(itemId, isSubTask) {

        if (isSubTask == true) {

            $(`#subCollapse${itemId}`).collapse('toggle');

        } else if (isSubTask == false) {

            $(`#taskCollapse${itemId}`).collapse('toggle');
        }

    }

    //ADD TAG
    function addTag(itemId, subTaskId, isSubTask) {

        $("#btnDeleteTask").on("click", function () {

        });

    }

    //CREATE TASK HTML
    function displayItems(data) {

        if (data.status == 400 || data.length == 0) {

            $("#noTasksFoundArea").removeClass('d-none');
            $('#loadingAnimationArea').toggleClass('d-none');
            return;

        }

        $("#noTasksFoundArea").addClass('d-none');

        data.forEach(item => {

            var cheveronHide = item.todoSubItems ? "" : 'd-none';

            var taskHTML = `

                <div id="taskAccordion${item.todoItemID}">
                    <div id="taskCard${item.todoItemID}" class="card bg-dark border-secondary rounded-0">
                        <div class="d-flex flex-row my-2">
                            <div>
                                <svg class="" onclick="addSubItem(${item.todoItemID})" touchstart="addSubItem(${item.todoItemID})" id="i-plus" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="20" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <path d="M16 2 L16 30 M2 16 L30 16" />
                                </svg>
                            </div>
                            <div>
                                <svg id="btnAddTaskTag${item.todoItemID}" data-toggle="modal" data-target="#tagModal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="20" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <circle cx="24" cy="8" r="2" />
                                    <path d="M2 18 L18 2 30 2 30 14 14 30 Z" />
                                </svg>
                            </div>
                            <div class="flex-fill mx-auto">
                                <svg class="${cheveronHide}" onclick="toggleCollapse('${item.todoItemID}', false)" touchstart="toggleCollapse('${item.todoItemID}', false)" id="i-chevron-bottom${item.todoItemID}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="20" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <path d="M30 10 L16 26 2 10 Z" />
                                </svg>
                            </div>
                            <div class="mr-auto">
                                <svg id="btnDeleteTask${item.todoItemID}" onclick="deleteTask(${item.todoItemID}, 'N/A', false)" data-toggle="modal" data-target="#deleteConfirmationModal" touchstart="deleteTask(${item.todoItemID}, 'N/A', false)" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="20" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <path d="M2 30 L30 2 M30 30 L2 2" />
                                </svg>
                            </div>
                        </div>
                        <div class="card-header bg-dark" id="taskHeading${item.todoItemID}">
                            <img id="statusIcon${item.todoItemID}" class="float-left" height="80" width="8" src="../../lib/statusIcons/${item.taskStatus}.png" />
                            <div class="mb-0 float-left" id="divTaskName${item.todoItemID}">
                                <h5 onclick="displayTaskInput('${item.todoItemID}', 'N/A', false)" class="mx-2 mt-1" id="taskNameHeader${item.todoItemID}">${item.taskName}</h5>
                                <div class="input-group mb-3 d-none" id="areaInputNameChange${item.todoItemID}">
                                    <input id="inputNameChange${item.todoItemID}" maxlength="25" onfocusout="taskNameChange('${item.todoItemID}', 'N/A', false)" type="text" class="form-control bg-dark text-white border-0" aria-describedby="basic-addon2">
                                    <div class="input-group-append">
                                    </div>
                                </div>
                            </div>
                            <div class="d-none">
                                <p id="hiddenTaskStatus${item.todoItemID}">${item.taskStatus}</p>
                            </div>
                            <div class="dropdown show">
                                <a class="btn text-white dropdown-toggle float-left" href="#" role="button" id="statusDropDown${item.todoItemID}" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    ${item.taskStatus}
                                </a>
                                <div class="dropdown-menu ml-3 mt-1" aria-labelledby="statusDropDown${item.todoItemID}">
                                    <a class="dropdown-item" onclick="taskStatusChange('Not Started', '${item.todoItemID}', 'N/A', '${item.taskName}', false)">Not Started</a>
                                    <a class="dropdown-item" onclick="taskStatusChange('In-Progress', '${item.todoItemID}', 'N/A', '${item.taskName}', false)">In-Progress</a>
                                    <a class="dropdown-item" onclick="taskStatusChange('Completed', '${item.todoItemID}', 'N/A', '${item.taskName}', false)">Completed</a>
                                </div>
                            </div>
                        </div>
                        <div id="taskCollapse${item.todoItemID}" class="collapse bg-secondary" aria-labelledby="taskHeading${item.todoItemID}" item-parent="#taskAccordion${item.todoItemID}">

                        </div>
                    </div>
                </div>
                <br />
                `;

            var newDiv = document.createElement('div');
            newDiv.innerHTML = taskHTML;
            document.getElementById("output").appendChild(newDiv);

            if (item.todoSubItems != null) {

                displaySubItems(item);

            }
        });
        $('#loadingAnimationArea').toggleClass('d-none');
    }

    //CREATE SUB-TASK HTML
    function displaySubItems(item) {


        if ('todoSubItems' in item) {

            item.todoSubItems.forEach(subItem => {

                if (subItem.subTaskDescription != null) {
                    caretHide = "";
                }

                createSubTaskHTML(subItem);

            });

        } else {

            $(`#i-chevron-bottom${item.todoItemID}`).removeClass('d-none');

            var subItem = item;

            createSubTaskHTML(subItem);

            if (!$(`#taskCollapse${subItem.todoItemID}`).hasClass('show')) {

                toggleCollapse(`${item.todoItemID}`, false);

            }

        }

        function createSubTaskHTML(subItem) {

            var subTaskHTML = `

            <div id="subAccordion${subItem.todoSubItemID}">
                <div id="subTaskCard${subItem.todoSubItemID}" class="card bg-dark rounded-0">
                    <div class="bg-dark">
                        <svg class="float-left my-1" onclick="addSubTaskDescription('${item.todoItemID}', '${subItem.todoSubItemID}')" touchstart="addSubTaskDescription('${item.todoItemID}', '${subItem.todoSubItemID}')" id="i-plus" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="15" height="20" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                            <path d="M16 2 L16 30 M2 16 L30 16" />
                        </svg>
                        <svg class="d-none align-middle mr-2" onclick="toggleCollapse('${subItem.todoSubItemID}', true)" touchstart="toggleCollapse('${subItem.todoSubItemID}', true)" id="i-chevron-bottom-sub${subItem.todoSubItemID}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="15" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                            <path d="M30 10 L16 26 2 10 Z" />
                        </svg>
                        <svg class="float-right my-1" id="btnDeleteSubTask${subItem.todoSubItemID}" onclick="deleteTask(${item.todoItemID}, ${subItem.todoSubItemID}, true)" data-toggle="modal" data-target="#deleteConfirmationModal" touchstart="deleteTask(${item.todoItemID}, ${subItem.todoSubItemID}, true)" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="15" height="15" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                            <path d="M2 30 L30 2 M30 30 L2 2" />
                        </svg>
                    </div>
                    <div class="card-header bg-dark border-0" id="subHeading${subItem.todoSubItemID}">
                        <img id="subStatusIcon${subItem.todoSubItemID}" class="float-left" height="40" width="8" src="../../lib/statusIcons/${subItem.subTaskStatus}.png" />
                        <div class="mb-0 float-left" id="divTaskName${subItem.todoSubItemID}">
                            <p onclick="displayTaskInput('${item.todoItemID}', '${subItem.todoSubItemID}', true)" class="font-weight-light mx-2 mt-1" id="subTaskNameHeader${subItem.todoSubItemID}">${subItem.subTaskName}</p>
                            <div class="input-group mb-3 d-none" id="subAreaInputNameChange${subItem.todoSubItemID}">
                                <input id="subInputNameChange${subItem.todoSubItemID}" onfocusout="taskNameChange('${item.todoItemID}','${subItem.todoSubItemID}', true)" type="text" class="form-control bg-dark text-white border-0" aria-describedby="basic-addon2">
                                <div class="input-group-append">
                                </div>
                            </div>
                        </div>
                        <div class="d-none">
                            <p id="subHiddenTaskStatus${subItem.todoSubItemID}">${subItem.subTaskStatus}</p>
                        </div>
                        <div class="dropdown show">
                            <a class="btn text-white dropdown-toggle float-left" href="#" role="button" id="subStatusDropDown${subItem.todoSubItemID}" data-toggle="dropdown">
                                ${subItem.subTaskStatus}
                            </a>
                            <div class="dropdown-menu" aria-labelledby="statusDropDown${subItem.todoSubItemID}">
                                <a class="dropdown-item" onclick="taskStatusChange('Not Started', '${item.todoItemID}', '${subItem.todoSubItemID}', '${subItem.subTaskName}', true)">Not Started</a>
                                <a class="dropdown-item" onclick="taskStatusChange('In-Progress', '${item.todoItemID}', '${subItem.todoSubItemID}', '${subItem.subTaskName}', true)">In-Progress</a>
                                <a class="dropdown-item" onclick="taskStatusChange('Completed', '${item.todoItemID}', '${subItem.todoSubItemID}', '${subItem.subTaskName}', true)">Completed</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            `;

            var newDiv = document.createElement('div');
            newDiv.innerHTML = subTaskHTML;
            document.getElementById(`taskCollapse${item.todoItemID}`).appendChild(newDiv);

            if (subItem.subTaskDescription != "") {

                createSubTaskDescriptionHTML(subItem);

            }
        }
    }

    function createSubTaskDescriptionHTML(subItem) {

        $(`#i-chevron-bottom-sub${subItem.todoSubItemID}`).removeClass('d-none')

        var subTaskDescriptionHTML =

            `
        <div id="subCollapse${subItem.todoSubItemID}" class="collapse bg-dark" data-parent="#subAccordion${subItem.todoSubItemID}">
            <div class="form-group">
                <p class="form-control bg-dark text-white border-0 font-weight-bold text-left">Details:</p>
                <hr />
                <textarea id="subAreaTaskDescription${subItem.todoSubItemID}" class="bg-dark text-white form-control border-0" onfocusout="changeSubTaskDescription('${subItem.todoItemID}','${subItem.todoSubItemID}', false)">${subItem.subTaskDescription}</textarea>
            </div class=form-group>
        </div >

        `;

        var newDiv = document.createElement('div');
        newDiv.innerHTML = subTaskDescriptionHTML;
        document.getElementById(`subTaskCard${subItem.todoSubItemID}`).appendChild(newDiv);

    }

</script>
